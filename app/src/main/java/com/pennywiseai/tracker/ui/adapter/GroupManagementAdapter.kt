package com.pennywiseai.tracker.ui.adapter

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.pennywiseai.tracker.R
import com.pennywiseai.tracker.data.TransactionGroup
import com.pennywiseai.tracker.databinding.ItemGroupManagementBinding
import java.text.NumberFormat
import java.util.*

class GroupManagementAdapter(
    private val onGroupClick: (TransactionGroup) -> Unit,
    private val onEditClick: (TransactionGroup) -> Unit,
    private val onDeleteClick: (TransactionGroup) -> Unit,
    private val onMergeClick: (TransactionGroup) -> Unit
) : ListAdapter<TransactionGroup, GroupManagementAdapter.GroupViewHolder>(GroupDiffCallback()) {
    
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): GroupViewHolder {
        val binding = ItemGroupManagementBinding.inflate(
            LayoutInflater.from(parent.context),
            parent,
            false
        )
        return GroupViewHolder(binding)
    }
    
    override fun onBindViewHolder(holder: GroupViewHolder, position: Int) {
        holder.bind(getItem(position))
    }
    
    inner class GroupViewHolder(
        private val binding: ItemGroupManagementBinding
    ) : RecyclerView.ViewHolder(binding.root) {
        
        private val currencyFormat = NumberFormat.getCurrencyInstance(Locale("en", "IN"))
        
        fun bind(group: TransactionGroup) {
            binding.apply {
                // Group info
                groupName.text = group.name
                transactionCount.text = "${group.transactionCount} transactions"
                totalAmount.text = currencyFormat.format(Math.abs(group.totalAmount))
                
                // Color code the total amount
                if (group.totalAmount >= 0) {
                    totalAmount.setTextColor(root.context.getColor(R.color.transaction_credit))
                } else {
                    totalAmount.setTextColor(root.context.getColor(R.color.transaction_debit))
                }
                
                // Show group type badge
                if (group.isAutoGenerated) {
                    groupTypeBadge.text = "AUTO"
                    groupTypeBadge.visibility = View.VISIBLE
                } else {
                    groupTypeBadge.text = "MANUAL"
                    groupTypeBadge.visibility = View.VISIBLE
                }
                
                // Pattern info
                patternText.text = "Pattern: ${group.merchantPattern}"
                
                // Category icon
                categoryIcon.text = getCategoryIcon(group.category.name)
                
                // Click listeners
                root.setOnClickListener { onGroupClick(group) }
                editButton.setOnClickListener { onEditClick(group) }
                deleteButton.setOnClickListener { onDeleteClick(group) }
                mergeButton.setOnClickListener { onMergeClick(group) }
                
                // Show/hide actions based on group type
                if (group.isAutoGenerated) {
                    editButton.visibility = View.GONE
                    deleteButton.visibility = View.VISIBLE
                    mergeButton.visibility = View.VISIBLE
                } else {
                    editButton.visibility = View.VISIBLE
                    deleteButton.visibility = View.VISIBLE
                    mergeButton.visibility = View.VISIBLE
                }
            }
        }
        
        private fun getCategoryIcon(category: String): String {
            return when (category) {
                "FOOD_DINING" -> "🍔"
                "TRANSPORTATION" -> "🚗"
                "SHOPPING" -> "🛍️"
                "ENTERTAINMENT" -> "🎬"
                "BILLS_UTILITIES" -> "💡"
                "HEALTHCARE" -> "🏥"
                "EDUCATION" -> "📚"
                "TRAVEL" -> "✈️"
                "GROCERIES" -> "🛒"
                "SUBSCRIPTION" -> "🔄"
                "INVESTMENT" -> "📈"
                "TRANSFER" -> "💸"
                else -> "💰"
            }
        }
    }
    
    class GroupDiffCallback : DiffUtil.ItemCallback<TransactionGroup>() {
        override fun areItemsTheSame(oldItem: TransactionGroup, newItem: TransactionGroup): Boolean {
            return oldItem.id == newItem.id
        }
        
        override fun areContentsTheSame(oldItem: TransactionGroup, newItem: TransactionGroup): Boolean {
            return oldItem == newItem
        }
    }
}