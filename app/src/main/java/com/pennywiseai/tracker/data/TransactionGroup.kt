package com.pennywiseai.tracker.data

import android.os.Parcelable
import androidx.room.Entity
import androidx.room.PrimaryKey
import androidx.room.ForeignKey
import androidx.room.Index
import kotlinx.parcelize.Parcelize

@Parcelize
@Entity(tableName = "transaction_groups")
data class TransactionGroup(
    @PrimaryKey val id: String,
    val name: String,                    // Display name (e.g., "Zomato Orders")
    val merchantPattern: String,         // Regex or exact match pattern
    val category: TransactionCategory,   // Primary category for this group
    val groupingType: GroupingType,      // How transactions are grouped
    val isAutoGenerated: Boolean,        // System vs user-created
    val createdDate: Long,
    val lastUpdated: Long,
    val transactionCount: Int = 0,       // Cached count
    val totalAmount: Double = 0.0,       // Cached total
    val averageAmount: Double = 0.0,     // Cached average
    val lastTransactionDate: Long = 0,   // Most recent transaction
    val isActive: Boolean = true         // Can be disabled
) : Parcelable

@Entity(
    tableName = "transaction_group_mappings",
    foreignKeys = [
        ForeignKey(
            entity = Transaction::class, 
            parentColumns = ["id"], 
            childColumns = ["transactionId"],
            onDelete = ForeignKey.CASCADE
        ),
        ForeignKey(
            entity = TransactionGroup::class, 
            parentColumns = ["id"], 
            childColumns = ["groupId"],
            onDelete = ForeignKey.CASCADE
        )
    ],
    indices = [
        Index("transactionId"), 
        Index("groupId"),
        Index("transactionId", "groupId", unique = true)
    ]
)
data class TransactionGroupMapping(
    @PrimaryKey val id: String,
    val transactionId: String,
    val groupId: String,
    val confidence: Float,              // How confident we are about this grouping (0.0 - 1.0)
    val createdDate: Long,
    val isManuallyAssigned: Boolean = false     // User manually assigned vs auto-detected
)

enum class GroupingType {
    MERCHANT_EXACT,          // Exact merchant name match
    MERCHANT_FUZZY,          // Similar merchant names (Zomato, Zomato Online)
    CATEGORY_AMOUNT,         // Same category + similar amounts
    RECURRING_PATTERN,       // Regular time intervals + similar amounts
    UPI_ID,                 // Same UPI ID transactions
    MANUAL                  // User-defined grouping
}

// Data class for grouped transaction display
data class GroupedTransaction(
    val group: TransactionGroup,
    val transactions: List<Transaction>,
    val recentTransactions: List<Transaction> = transactions.take(3), // Show only recent 3
    val isExpanded: Boolean = false
)