package com.pennywiseai.tracker.repository

import com.pennywiseai.tracker.data.TransactionGroup
import com.pennywiseai.tracker.data.TransactionGroupMapping
import com.pennywiseai.tracker.data.GroupingType
import com.pennywiseai.tracker.data.TransactionCategory
import com.pennywiseai.tracker.data.Transaction
import com.pennywiseai.tracker.database.AppDatabase
import com.pennywiseai.tracker.database.GroupWithTotals
import kotlinx.coroutines.flow.Flow
import java.util.UUID
import android.util.Log

class TransactionGroupRepository(private val database: AppDatabase) {
    
    companion object {
        private const val TAG = "TransactionGroupRepository"
    }
    
    private val groupDao = database.transactionGroupDao()
    
    // Transaction Group operations
    fun getAllActiveGroups(): Flow<List<TransactionGroup>> = groupDao.getAllActiveGroups()
    
    fun getGroupById(groupId: String): Flow<TransactionGroup?> = groupDao.getGroupById(groupId)
    
    suspend fun getGroupByPattern(pattern: String, type: GroupingType): TransactionGroup? =
        groupDao.getGroupByPattern(pattern, type)
    
    fun getGroupsByCategory(category: TransactionCategory): Flow<List<TransactionGroup>> =
        groupDao.getGroupsByCategory(category)
    
    suspend fun insertGroup(group: TransactionGroup) = groupDao.insertGroup(group)
    
    suspend fun updateGroup(group: TransactionGroup) = groupDao.updateGroup(group)
    
    suspend fun deleteGroup(group: TransactionGroup) {
        // First delete all mappings for this group
        groupDao.deleteMappingsForGroup(group.id)
        // Then delete the group
        groupDao.deleteGroup(group)
    }
    
    suspend fun deactivateGroup(groupId: String) = groupDao.deactivateGroup(groupId)
    
    // Transaction Group Mapping operations
    fun getMappingsForGroup(groupId: String): Flow<List<TransactionGroupMapping>> =
        groupDao.getMappingsForGroup(groupId)
    
    suspend fun getMappingsForTransaction(transactionId: String): List<TransactionGroupMapping> =
        groupDao.getMappingsForTransaction(transactionId)
    
    suspend fun addTransactionToGroup(transactionId: String, groupId: String, confidence: Float = 1.0f, isManual: Boolean = false) {
        val mapping = TransactionGroupMapping(
            id = UUID.randomUUID().toString(),
            transactionId = transactionId,
            groupId = groupId,
            confidence = confidence,
            createdDate = System.currentTimeMillis(),
            isManuallyAssigned = isManual
        )
        groupDao.insertMapping(mapping)
        
        // Update group totals after adding transaction
        updateGroupTotals(groupId)
    }
    
    suspend fun removeTransactionFromGroup(transactionId: String, groupId: String) {
        val mappings = groupDao.getMappingsForTransaction(transactionId)
        mappings.filter { it.groupId == groupId }.forEach { mapping ->
            groupDao.deleteMapping(mapping)
        }
        
        // Update group totals after removing transaction
        updateGroupTotals(groupId)
    }
    
    suspend fun removeTransactionFromAllGroups(transactionId: String) {
        val mappings = groupDao.getMappingsForTransaction(transactionId)
        val affectedGroups = mappings.map { it.groupId }.distinct()
        
        groupDao.deleteMappingsForTransaction(transactionId)
        
        // Update totals for all affected groups
        affectedGroups.forEach { groupId ->
            updateGroupTotals(groupId)
        }
    }
    
    // Complex operations
    suspend fun getGroupsWithCalculatedTotals(): List<GroupWithTotals> =
        groupDao.getGroupsWithCalculatedTotals()
    
    suspend fun getRecentTransactionsForGroup(groupId: String, limit: Int = 10): List<Transaction> =
        groupDao.getRecentTransactionsForGroup(groupId, limit)
    
    fun getAllTransactionsForGroup(groupId: String): Flow<List<Transaction>> =
        groupDao.getAllTransactionsForGroup(groupId)
    
    suspend fun getUngroupedTransactionCount(): Int = groupDao.getUngroupedTransactionCount()
    
    suspend fun getUngroupedTransactions(limit: Int = 100): List<Transaction> =
        groupDao.getUngroupedTransactions(limit)
    
    // Helper methods
    suspend fun createGroup(
        name: String,
        merchantPattern: String,
        category: TransactionCategory,
        groupingType: GroupingType,
        isAutoGenerated: Boolean = false
    ): TransactionGroup {
        val now = System.currentTimeMillis()
        val group = TransactionGroup(
            id = UUID.randomUUID().toString(),
            name = name,
            merchantPattern = merchantPattern,
            category = category,
            groupingType = groupingType,
            isAutoGenerated = isAutoGenerated,
            createdDate = now,
            lastUpdated = now
        )
        insertGroup(group)
        return group
    }
    
    suspend fun updateGroupTotals(groupId: String) {
        val transactions = getRecentTransactionsForGroup(groupId, Int.MAX_VALUE)
        
        if (transactions.isEmpty()) {
            groupDao.updateGroupTotals(
                groupId = groupId,
                count = 0,
                total = 0.0,
                average = 0.0,
                lastDate = 0,
                updateTime = System.currentTimeMillis()
            )
        } else {
            val total = transactions.sumOf { it.amount }
            val average = total / transactions.size
            val lastDate = transactions.maxOfOrNull { it.date } ?: 0
            
            
            groupDao.updateGroupTotals(
                groupId = groupId,
                count = transactions.size,
                total = total,
                average = average,
                lastDate = lastDate,
                updateTime = System.currentTimeMillis()
            )
        }
    }
    
    suspend fun refreshAllGroupTotals() {
        val groups = groupDao.getAllActiveGroups()
        // Note: This collects the flow once to get current groups
        // In real implementation, you might want to handle this differently
    }
}